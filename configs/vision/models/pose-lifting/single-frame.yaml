# Implement network architecture implemented in the paper:
# A simple yet effective baseline for 3d human pose estimation, ICCV 2017

name: "3D-Pose-Estimation"

dataloader:
  base_dataloader:
    batch_size: 64

training:
  ID: "ClassificationTrainer"

  epochs: 200
  lr: 0.001

  optimizer: "adamw"
  optimizer_cfg:
    lr: "{training.lr}"
    weight_decay: 0.0

  lr_scheduler:
    name: "cosine"
    args:
      T_max: "{training.epochs}"
    cfg:
      interval: "epoch"
  metrics:
    # TODO
    # protocol 1
    mpjpe:
    # protocol 2
    pmpjpe:
    # protocol 3
    nmpjpe:

callbacks:
  ModelCheckpoint:
    name: LightningCallback
    args:
      name: ModelCheckpoint
      args:
        monitor: "epoch_val/mpjpe"
        mode: "max"
        save_last: True
        save_top_k: 1
  LearningRateMonitor:
    name: LightningCallback
    args:
      name: "LearningRateMonitor"
      args:
        logging_interval: "epoch"

model:
  backbone:
    name: "PoseLiftingSingleFrameMLP"
    args:
      num_features: 1024
      dropout: 0.5
      num_layers: 2
      num_blocks: 2
      num_joints: "{const.num_joints}"
  modules:
    classifier:
      name: ClassificationHead
      input: "output"
      args:
        reduction: "gap"
        in_features: "{model.backbone.out_features}"
        dropout: 0.2
        num_classes: "{const.num_classes}"
        return_logits: True # return logits instead of softmax probability.
    loss_fn:
      name: "CrossEntropyLoss"

wandb:
  project: "human36m-3d-pose-estimation-single-frame"
