name: "RandomInitialization-ResNet18"

dataloader:
  base_dataloader:
    batch_size: 256

trainer:
  max_steps: 20000

training:
  ID: "ClassificationTrainer"

  epochs: null
  lr: 0.01

  optimizer: "sgd"
  optimizer_cfg:
    lr: "{training.lr}"
    nesterov: True
    momentum: 0.9
    weight_decay: "{training.lr}*0.01"

  lr_warmup:
    multiplier: 1
    total_epoch: 1000

  lr_scheduler:
    name: "cosine"
    args:
      T_max: "{trainer.max_steps}"
    cfg:
      interval: "step"

  metrics:
    loss:
      when: "trn,val,test"
      name: "MeanMetric"
      file: "torchmetrics"
      update:
        value: "cls_loss"
    confusion_matrix:
      interval: { "trn": 50, "val": 5 }
      when: "trn,val,test"
      name: "ConfusionMatrix"
      file: "torchmetrics"
      args:
        num_classes: "{const.num_classes}"
      update:
        preds: "logits"
        target: "y"
    accuracy:
      when: "trn,val,test"
      name: "Accuracy"
      file: "torchmetrics"
      update:
        preds: "logits"
        target: "y"

callbacks:
  - name: ModelCheckpoint
    file: lightning
    args:
      monitor: "epoch_val/accuracy"
      mode: "max"
      save_last: True
      save_top_k: 1
  - name: "LearningRateMonitor"
    file: "lightning"
    args:
      logging_interval: "epoch"

model:
  modules:
    classifier:
      name: ClassificationHead
      input: "output"
      args:
        reduction: "gap"
        in_features: "{model.backbone.out_features}"
        num_classes: "{const.num_classes}"
        return_logits: True # return logits instead of softmax probability.
    loss_fn:
      name: "CrossEntropyLoss"

wandb:
  project: "Transfer-learning-classification"
