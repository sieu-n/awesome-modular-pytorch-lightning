# create multi-frame annotation dataset proposed in the paper:
# 3D human pose estimation in video with temporal convolutions and semi-supervised training

dataloader:
  base_dataloader: # depends on hardware:)
    collate_fn:
      # use `mmcv.parallel.DataContainer` to send Camera object.
      name: mmcv_datacontainer_collate

dataset:
  dataset_base_cfg:
    name: "Human36AnnotationTemporalDataset"
    args:
      receptive_field: "{const.receptive_field}"
      base_dir: "./human36m"

  dataset_subset_cfg:
    trn:
      args:
        subjects:
          - 1
          - 5
          - 6
          - 7
          - 8
    val:
      args:
        subjects:
          - 9
          - 11

transform: [
    [
      "val",
      [
        { "name": "Create2DProjectionTemporal" },
        { "name": "RemoveKeys", "args": { "keys": ["temporal_joints"] } },
      ]
    ],
    [
      "trn",
      [
        { "name": "Create2DProjectionTemporal" },
        {
          "name": "RenameKeys",
          "args": { "mapper": { "temporal_joints": "joint" } },
        },
        # reshape (243, 17, 3) -> (17 * 243, 3)
        { 
          "name": "NumpyTransform",
          "args": {
            "key": "joint",
            "name": "reshape",
            "args": {"newshape": [-1, 3]},
          }
        },
      ]
    ],
    [
      "trn,val",
      [
        # TODO
        { "name": "WorldToCameraCoord" },
        { "name": "CenterAroundJoint" },
      ]
    ],
    [
      "trn",
      [
        # reshape (17 * 243, 3) -> (243, 17, 3)
        { 
          "name": "NumpyTransform", 
          "args": {
            "key": "joint",
            "name": "reshape",
            "args": {"newshape": ["{const.receptive_field}", "{const.num_joints}", 3]},
          }
        },
      ]
    ],
    [
      "trn,val",
      [
        { "name": "ToTensor", "args": {
              "key": "joint",
              "dtype": "float",
              # (243, 17, 3) -> (17, 3, 243)
              "channel_axis": [1, 2],
            } 
        },
        { "name": "ToTensor", "args": {
              "key": "joint_2d",
              "dtype": "float",
              # (243, 17, 2) -> (17, 2, 243)
              "channel_axis": [1, 2],
            } },
        {
          "name": "MultipleKeyTransform",
          "args":
            {
              "keys": ["camera", "meta"],
              "name": "CollectDataContainer",
              "args": { "cpu_only": True },
            },
        },
        {
          "name": "FastNormalize",
          "args":
            {
              "mean": "{const.normalization_mean}",
              "std": "{const.normalization_std}",
              "key": "joint",
            },
        },
        {
          "name": "FastNormalize",
          "args":
            {
              "mean": "{const.normalization_mean_2d}",
              "std": "{const.normalization_std_2d}",
              "key": "joint_2d",
            },
        },
      ],
    ],
  ]

# other useful configs.
const:
  task: "joint lifting"
  num_joints: 17
